# Lab 1

* Basic command line navigation
* Script execution
* Reading contents of a file

## Goals
* Setup up a better default environment for future tasks
* Practice basic folder navigation
* View contents of script files

## Deliverables
* You should have a cwolf account by next class if you do not already
* You should have run the setup script and have everything ready to go for next class
* Read pages 2-23 of The Linux Pocket Guide
* Read the vim [tutorial](http://blog.interlinked.org/tutorials/vim_tutorial.html)
* If time do the interactive [tutorial](http://www.openvim.com/tutorial.html)

### Environment Setup

The first thing we are going to do is setup some better default settings
for your bash profile. We will also add some plugins for the vim editor to make it
much nicer to use.

First make sure you are in your home directory.
`cd ~`
Type `pwd` and hit enter to confirm. You should see something like this:
`/home/student/{your username}`

We are going to use a program named `git` to `clone` a repository from a URL that contains the files we need.

Run the following command:
`git clone https://github.com/icecreammatt/student-dotfiles.git dotfiles`

What this has done is create a copy of the `dotfiles.git` repository from github.com into a folder inside your home directory named `dotfiles`.

`cd dotfiles` to move into the dotfiles folder.

Type `ls` to list all the files in the current directory.

You should see a few `setup_*.sh` files. The one of interest is named `setup.sh`.

Type `cat setup.sh` to view the contents of the file.

You should see something like this:

```
source ./setup_links.sh
source ./setup_vim.sh
source ./setup_git.sh
cd ~/dotfiles
git checkout -b $(whoami)
```

The setup.sh script is going to run the command `source`  on each of the first 3 listed script files as if you had run them by hand in the terminal.

The `setup_links.sh` script backs up your existing config files into a folder named `.dotfiles_backup_#######` and then links new config files from the dotfiles folder in their place.

The `setup_vim.sh` script creates a new directory in your home directory (~/) named `.vim/bundle` by using the `mkdir` command. The `-p` flag creates parent folders for children ones in the event that they don't already exist. It then clones a different git repository that has a package manager for `vim` and runs the setup.

Finally `setup_git.sh` is a short script which you use to setup your git details. Later on when adding and committing source code, git will be using this information as part of the time stamp. It is important that this is filled in correctly now as it is difficult to change later after we make commits.

The cd command should look familiar. It is used for navigating into the `dotfiles` folder inside of the home directory if you weren't already in it.

Finally it runs another `git` command named `checkout` This creates a new branch that modifications can be made to. All files and folders inside of the dotfiles folder are using git to keep track of changes. We will discuss `git` in more detail later in the semester.

Run the file `setup.sh`  by typing `./setup.sh` or `source setup.sh`.

After filling out the name and email address for the git info disconnect and reconnect to cwolf. This will cause your bash_profile to be re-evaluated so the settings apply to your logged in session.

The bash prompt should look a little bit different now. The key thing is that when we start using git we will get information about files being changed and what branch we are on.

Spend some time going over the commands listed [here](http://carrier.cs.sonoma.edu/2014_spring/#/lesson/1) please ask questions if you need help.

Practice navigating through the different directories and using cat and less to print the contents of the various files. I recommend looking at the scripts in the dotfiles folder.

Next read the vim [tutorial](http://blog.interlinked.org/tutorials/vim_tutorial.html) and if you have time do the interactive [tutorial](http://www.openvim.com/tutorial.html)
